// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package ppu

type ControlRegister uint8

func (C *ControlRegister) NMI() bool {
	const bit = 1 << 7
	return *C&bit == bit
}

func (C *ControlRegister) SetNMI(value bool) {
	const bit = uint8(1) << 7
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*C = ControlRegister((uint8(*C) & ^bit) | valueInt<<7)
}

func (C *ControlRegister) PPUMode() bool {
	const bit = 1 << 6
	return *C&bit == bit
}

func (C *ControlRegister) SetPPUMode(value bool) {
	const bit = uint8(1) << 6
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*C = ControlRegister((uint8(*C) & ^bit) | valueInt<<6)
}

func (C *ControlRegister) SpriteSize() uint8 {
	return uint8((*C >> 5) & 0x1)
}

func (C *ControlRegister) SetSpriteSize(value uint8) {
	const mask = uint8(((1 << 1) - 1) << 5)
	*C = ControlRegister((uint8(*C) & ^mask) | uint8(value)<<5)
}

func (C *ControlRegister) PatternTable() uint8 {
	return uint8((*C >> 4) & 0x1)
}

func (C *ControlRegister) SetPatternTable(value uint8) {
	const mask = uint8(((1 << 1) - 1) << 4)
	*C = ControlRegister((uint8(*C) & ^mask) | uint8(value)<<4)
}

func (C *ControlRegister) SpriteTable() uint8 {
	return uint8((*C >> 3) & 0x1)
}

func (C *ControlRegister) SetSpriteTable(value uint8) {
	const mask = uint8(((1 << 1) - 1) << 3)
	*C = ControlRegister((uint8(*C) & ^mask) | uint8(value)<<3)
}

func (C *ControlRegister) VRAMIncrement() bool {
	const bit = 1 << 2
	return *C&bit == bit
}

func (C *ControlRegister) SetVRAMIncrement(value bool) {
	const bit = uint8(1) << 2
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*C = ControlRegister((uint8(*C) & ^bit) | valueInt<<2)
}

func (C *ControlRegister) NameTableAddress() uint8 {
	return uint8((*C >> 0) & 0x3)
}

func (C *ControlRegister) SetNameTableAddress(value uint8) {
	const mask = uint8(((1 << 2) - 1) << 0)
	*C = ControlRegister((uint8(*C) & ^mask) | uint8(value)<<0)
}
