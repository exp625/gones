// Code generated by running "go generate" in github.com/exp625/gones. DO NOT EDIT.

package apu

type StatusRegister uint8

func (S *StatusRegister) DMCInterrupt() bool {
	const bit = 1 << 7
	return *S&bit == bit
}

func (S *StatusRegister) SetDMCInterrupt(value bool) {
	const bit = uint8(1) << 7
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*S = StatusRegister((uint8(*S) & ^bit) | valueInt<<7)
}

func (S *StatusRegister) FrameInterrupt() bool {
	const bit = 1 << 6
	return *S&bit == bit
}

func (S *StatusRegister) SetFrameInterrupt(value bool) {
	const bit = uint8(1) << 6
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*S = StatusRegister((uint8(*S) & ^bit) | valueInt<<6)
}

func (S *StatusRegister) NoiseStatus() bool {
	const bit = 1 << 4
	return *S&bit == bit
}

func (S *StatusRegister) SetNoiseStatus(value bool) {
	const bit = uint8(1) << 4
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*S = StatusRegister((uint8(*S) & ^bit) | valueInt<<4)
}

func (S *StatusRegister) TriangleStatus() bool {
	const bit = 1 << 3
	return *S&bit == bit
}

func (S *StatusRegister) SetTriangleStatus(value bool) {
	const bit = uint8(1) << 3
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*S = StatusRegister((uint8(*S) & ^bit) | valueInt<<3)
}

func (S *StatusRegister) Pulse2Status() bool {
	const bit = 1 << 2
	return *S&bit == bit
}

func (S *StatusRegister) SetPulse2Status(value bool) {
	const bit = uint8(1) << 2
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*S = StatusRegister((uint8(*S) & ^bit) | valueInt<<2)
}

func (S *StatusRegister) Pulse1Status() bool {
	const bit = 1 << 1
	return *S&bit == bit
}

func (S *StatusRegister) SetPulse1Status(value bool) {
	const bit = uint8(1) << 1
	valueInt := uint8(0)
	if value {
		valueInt = 1
	}

	*S = StatusRegister((uint8(*S) & ^bit) | valueInt<<1)
}
