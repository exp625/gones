package nes

type Cartridge struct {
	data [0xFFFF]uint8
}

func (c *Cartridge) Reset() {
	c.data = [0xFFFF]uint8{}
	c.data[0xFFFC] = 0x00
	c.data[0xFFFD] = 0xF0

	// Load 0x01 in A and store A in memory location 0xFF
	c.data[0xF000] = 0xA9
	c.data[0xF001] = 0x01

	// Save A at 0xFF00
	c.data[0xF002] = 0x8D
	c.data[0xF003] = 0xFF
	c.data[0xF004] = 0x00

	// Jump to subroutine
	c.data[0xF005] = 0x20
	c.data[0xF006] = 0x00
	c.data[0xF007] = 0xFA

	// LDA Value from address 0x00FF - Should be 0x02
	c.data[0xF008] = 0xAD
	c.data[0xF009] = 0xFF

	c.data[0xF00A] = 0x00

	// Subroutine
	// NOP
	c.data[0xFA00] = 0xEA

	// Load 0x10 in A
	c.data[0xFA01] = 0xA9
	c.data[0xFA02] = 0x04

	// CMP A with M
	c.data[0xFA03] = 0xCD
	c.data[0xFA04] = 0xFF
	c.data[0xFA05] = 0x00

	// BNE if 0
	c.data[0xFA06] = 0xD0
	c.data[0xFA07] = 0x03

	// JUMP
	c.data[0xFA08] = 0x4C
	c.data[0xFA09] = 0x11
	c.data[0xFA0A] = 0xFA

	// INC 0x00FF
	c.data[0xFA0B] = 0xEE
	c.data[0xFA0C] = 0xFF
	c.data[0xFA0D] = 0x00

	// Jump to subroutine

	c.data[0xFA0E] = 0x20
	c.data[0xFA0F] = 0x00
	c.data[0xFA10] = 0xFA

	// RTS
	c.data[0xFA11] = 0x60
	/*
		// LDA with 0xAB
		c.data[0xF000] = 0xA9
		c.data[0xF001] = 0xAB

		// NOP
		c.data[0xF002] = 0xEA

		// LDA Value from address 0x00FF
		c.data[0xF003] = 0xAD
		c.data[0xF004] = 0xFF
		c.data[0xF005] = 0x00

		// INC 0x00FF
		c.data[0xF006] = 0xEE
		c.data[0xF007] = 0xFF
		c.data[0xF008] = 0x00

		// JMP 0xF000
		c.data[0xF009] = 0x4C
		c.data[0xF00A] = 0x00
		c.data[0xF00B] = 0xF0

	*/
}

func (c *Cartridge) Read(location uint16) uint8 {
	return c.data[location]
}

func (c *Cartridge) Write(location uint16, data uint8) {
	return
}
